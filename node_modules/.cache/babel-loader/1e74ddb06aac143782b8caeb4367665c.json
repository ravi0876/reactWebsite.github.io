{"ast":null,"code":"var _jsxFileName = \"F:\\\\demo\\\\src\\\\index.js\";\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     {/* <App /> */}\n//     <h1>Hello World</h1>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n// var React = require('react');\n// import React from 'react';\n// var ReactDOM = require('react-dom');\n// import ReactDOM from 'react-dom;\n// ReactDOM.render('kya dikhana hai what to show','kha dikhana hai where to show','callback func');\n// ReactDOM.render(\n//   <h1>Hello World!!</h1>\n//   ,document.getElementById('root'));\n//render multiple elements inside ReactDOM.render() \n// place html (or can say jsx elemnts) put it in div tag\n// ReactDOM.render(\n//   <div>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </div>\n//   ,document.getElementById('root'));\n//To avoid unneccesary tag place on html code while including multiple elements inside ReactDom.render()\n//we use React.fragment\n// ReactDOM.render(\n//   <React.Fragment> also u can avoid to write fragment like <>elements</>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </React.Fragment>\n//   ,document.getElementById('root'));\n// const arr=['abc','def','efg'];\n// In react v16 it's possible for render()\n// to  return an array of elements \n// ReactDOM.render(\n//   [\n//   <h1>Hello World!!</h1>,\n//   <p>Welcome enjoy</p>\n//   ],\n//    document.getElementById('root'));\n// after converted by babel(Javascript Compiler) \n// ReactDOM.render(React.createElement(\"h1\",null,\"Hello world\"),document.getElementById(\"root\"));\n//traditional javascript code to render into html code \n// var h1 = document.createElement(\"h1\");\n// h1.innerHTML=\"hello world\";\n// document.getElementById(\"root\").appendChild(h1);\n//new series challenge\n// ReactDOM.render(\n//   [\n//   <h1>NetFlix</h1>,\n//   <p>List of best series</p>,\n//     <ol>\n//       <li>A</li>\n//       <li>B</li>\n//       <li>C</li>\n//       <li>D</li>\n//       <li>E</li>\n//     </ol>\n//   ],\n//    document.getElementById('root'));\n//use javscript element into html or jsx element using {} also use to write expression bt not statements(conditional,looping)\n// const fname=\"CM Punk\";\n// ReactDOM.render(\n//   <>\n//   <h1>My name is {fname}</h1>\n//   <p>Sum is : {3 + 4}</p>\n//   <p>Random no : {Math.random()}</p>\n//   </>\n//   ,document.getElementById('root'));\n//Template Literals\n// const fname=\"CM\";\n// const lname=\"Punk\";\n// ReactDOM.render(\n//   <h1>{`My name is ${fname} ${lname}`}</h1>,\n//   document.getElementById('root')\n// );\n//Challenge to show current date and time\n// const d = new Date;\n// ReactDOM.render(\n//   <>\n//   <h2>{`Current date ${d.toLocaleDateString()}`}</h2>\n//   <h3>{`Current Time ${d.toLocaleTimeString()}`}</h3>\n//   </>,\n//   document.getElementById('root')\n// );  \n//jsx attribute\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // const name=\"Abhi\";\n//inline css for jsx elements\n// const heading={\n//   color: 'maroon',\n//   textAlign: 'center',\n//   textTransform: 'capitalize',\n//   fontWeight: 'bold',\n//   textShadow: \"0px 2px 4px darkorange\",\n//   margin: \"50px 0px\",\n//   fontFamily: \"'Josefin Sans', sans-serif\",\n// };\n// ReactDOM.render(\n//   <>\n//     {/* <h1 className=\"heading\">My name is {name}</h1> */}\n//     <h1 style={heading}>My name is {name}</h1>\n//     <div className=\"img_div\">\n//       <img src=\"https://picsum.photos/200/300\" alt=\"img\"/>\n//       <img src=\"https://picsum.photos/250/300\" alt=\"img\"/>\n//       <img src=\"https://picsum.photos/300/300\" alt=\"img\"/>\n//     </div>\n//   </>,\n//   document.getElementById(\"root\")\n// );\n//challenge 3\n\nlet currDate = new Date(2020, 6, 30, 15);\nlet currHrs = currDate.getHours();\nlet greeting = '';\nconst cssStyle = {};\n\nif (currHrs >= 1 && currHrs < 12) {\n  greeting = 'Good Morning';\n  cssStyle.color = 'green';\n} else if (currHrs >= 12 && currHrs < 16) {\n  greeting = 'Good Afternoon';\n  cssStyle.color = 'red';\n} else if (currHrs >= 16 && currHrs < 19) {\n  greeting = 'Good Evening';\n  cssStyle.color = 'orange';\n} else {\n  greeting = 'Good night';\n  cssStyle.color = 'Black';\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 6\n  }\n}, \"Hello Sir, \", /*#__PURE__*/React.createElement(\"span\", {\n  style: cssStyle,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 21\n  }\n}, \" \", greeting))), document.getElementById('root'));","map":{"version":3,"sources":["F:/demo/src/index.js"],"names":["React","ReactDOM","currDate","Date","currHrs","getHours","greeting","cssStyle","color","render","document","getElementById"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAIC,QAAQ,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,EAAhB,EAAmB,EAAnB,CAAf;AACA,IAAIC,OAAO,GAAGF,QAAQ,CAACG,QAAT,EAAd;AAEA,IAAIC,QAAQ,GAAC,EAAb;AACA,MAAMC,QAAQ,GAAC,EAAf;;AAGA,IAAIH,OAAO,IAAE,CAAT,IAAcA,OAAO,GAAG,EAA5B,EACA;AACEE,EAAAA,QAAQ,GAAC,cAAT;AACAC,EAAAA,QAAQ,CAACC,KAAT,GAAe,OAAf;AACD,CAJD,MAKK,IAAGJ,OAAO,IAAE,EAAT,IAAeA,OAAO,GAAG,EAA5B,EACL;AACEE,EAAAA,QAAQ,GAAC,gBAAT;AACAC,EAAAA,QAAQ,CAACC,KAAT,GAAe,KAAf;AACD,CAJI,MAKA,IAAGJ,OAAO,IAAE,EAAT,IAAeA,OAAO,GAAC,EAA1B,EACL;AACEE,EAAAA,QAAQ,GAAC,cAAT;AACAC,EAAAA,QAAQ,CAACC,KAAT,GAAe,QAAf;AACD,CAJI,MAKD;AACFF,EAAAA,QAAQ,GAAC,YAAT;AACAC,EAAAA,QAAQ,CAACC,KAAT,GAAe,OAAf;AACD;;AACAP,QAAQ,CAACQ,MAAT,eACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAe;AAAM,EAAA,KAAK,EAAEF,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAyBD,QAAzB,CAAf,CADF,CADF,EAIEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     {/* <App /> */}\n//     <h1>Hello World</h1>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n// var React = require('react');\n// import React from 'react';\n// var ReactDOM = require('react-dom');\n// import ReactDOM from 'react-dom;\n// ReactDOM.render('kya dikhana hai what to show','kha dikhana hai where to show','callback func');\n\n// ReactDOM.render(\n//   <h1>Hello World!!</h1>\n//   ,document.getElementById('root'));\n\n//render multiple elements inside ReactDOM.render() \n// place html (or can say jsx elemnts) put it in div tag\n\n// ReactDOM.render(\n//   <div>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </div>\n//   ,document.getElementById('root'));\n\n//To avoid unneccesary tag place on html code while including multiple elements inside ReactDom.render()\n//we use React.fragment\n\n// ReactDOM.render(\n//   <React.Fragment> also u can avoid to write fragment like <>elements</>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </React.Fragment>\n//   ,document.getElementById('root'));\n\n// const arr=['abc','def','efg'];\n// In react v16 it's possible for render()\n// to  return an array of elements \n\n// ReactDOM.render(\n//   [\n//   <h1>Hello World!!</h1>,\n//   <p>Welcome enjoy</p>\n//   ],\n//    document.getElementById('root'));\n\n// after converted by babel(Javascript Compiler) \n// ReactDOM.render(React.createElement(\"h1\",null,\"Hello world\"),document.getElementById(\"root\"));\n\n//traditional javascript code to render into html code \n// var h1 = document.createElement(\"h1\");\n// h1.innerHTML=\"hello world\";\n// document.getElementById(\"root\").appendChild(h1);\n\n//new series challenge\n\n// ReactDOM.render(\n//   [\n//   <h1>NetFlix</h1>,\n//   <p>List of best series</p>,\n//     <ol>\n//       <li>A</li>\n//       <li>B</li>\n//       <li>C</li>\n//       <li>D</li>\n//       <li>E</li>\n//     </ol>\n//   ],\n//    document.getElementById('root'));\n\n//use javscript element into html or jsx element using {} also use to write expression bt not statements(conditional,looping)\n\n// const fname=\"CM Punk\";\n// ReactDOM.render(\n//   <>\n//   <h1>My name is {fname}</h1>\n//   <p>Sum is : {3 + 4}</p>\n//   <p>Random no : {Math.random()}</p>\n//   </>\n//   ,document.getElementById('root'));\n\n  //Template Literals\n  // const fname=\"CM\";\n  // const lname=\"Punk\";\n  // ReactDOM.render(\n  //   <h1>{`My name is ${fname} ${lname}`}</h1>,\n  //   document.getElementById('root')\n  // );\n\n  //Challenge to show current date and time\n\n  // const d = new Date;\n  // ReactDOM.render(\n  //   <>\n  //   <h2>{`Current date ${d.toLocaleDateString()}`}</h2>\n  //   <h3>{`Current Time ${d.toLocaleTimeString()}`}</h3>\n  //   </>,\n  //   document.getElementById('root')\n  // );  \n\n//jsx attribute\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// const name=\"Abhi\";\n//inline css for jsx elements\n// const heading={\n//   color: 'maroon',\n//   textAlign: 'center',\n//   textTransform: 'capitalize',\n//   fontWeight: 'bold',\n//   textShadow: \"0px 2px 4px darkorange\",\n//   margin: \"50px 0px\",\n//   fontFamily: \"'Josefin Sans', sans-serif\",\n// };\n// ReactDOM.render(\n//   <>\n//     {/* <h1 className=\"heading\">My name is {name}</h1> */}\n//     <h1 style={heading}>My name is {name}</h1>\n//     <div className=\"img_div\">\n//       <img src=\"https://picsum.photos/200/300\" alt=\"img\"/>\n//       <img src=\"https://picsum.photos/250/300\" alt=\"img\"/>\n//       <img src=\"https://picsum.photos/300/300\" alt=\"img\"/>\n//     </div>\n//   </>,\n//   document.getElementById(\"root\")\n// );\n\n//challenge 3\nlet currDate = new Date(2020,6,30,15);\nlet currHrs = currDate.getHours();\n\nlet greeting='';\nconst cssStyle={\n  \n};\nif (currHrs>=1 && currHrs < 12)\n{\n  greeting='Good Morning';\n  cssStyle.color='green';\n}\nelse if(currHrs>=12 && currHrs < 16)\n{\n  greeting='Good Afternoon';\n  cssStyle.color='red';\n}\nelse if(currHrs>=16 && currHrs<19)\n{\n  greeting='Good Evening';\n  cssStyle.color='orange';\n}\nelse{\n  greeting='Good night';\n  cssStyle.color='Black';\n}\n ReactDOM.render(\n   <>\n     <h1>Hello Sir, <span style={cssStyle}> {greeting}</span></h1>\n   </>,\n   document.getElementById('root')\n );\n"]},"metadata":{},"sourceType":"module"}