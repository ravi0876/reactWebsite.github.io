{"ast":null,"code":"var _jsxFileName = \"F:\\\\demo\\\\src\\\\index.js\";\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     {/* <App /> */}\n//     <h1>Hello World</h1>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n// var React = require('react');\n// import React from 'react';\n// var ReactDOM = require('react-dom');\n// import ReactDOM from 'react-dom;\n// ReactDOM.render('kya dikhana hai what to show','kha dikhana hai where to show','callback func');\n// ReactDOM.render(\n//   <h1>Hello World!!</h1>\n//   ,document.getElementById('root'));\n//render multiple elements inside ReactDOM.render() \n// place html (or can say jsx elemnts) put it in div tag\n// ReactDOM.render(\n//   <div>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </div>\n//   ,document.getElementById('root'));\n//To avoid unneccesary tag place on html code while including multiple elements inside ReactDom.render()\n//we use React.fragment\n// ReactDOM.render(\n//   <React.Fragment> also u can avoid to write fragment like <>elements</>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </React.Fragment>\n//   ,document.getElementById('root'));\n// const arr=['abc','def','efg'];\n// In react v16 it's possible for render()\n// to  return an array of elements \n// ReactDOM.render(\n//   [\n//   <h1>Hello World!!</h1>,\n//   <p>Welcome enjoy</p>\n//   ],\n//    document.getElementById('root'));\n// after converted by babel(Javascript Compiler) \n// ReactDOM.render(React.createElement(\"h1\",null,\"Hello world\"),document.getElementById(\"root\"));\n//traditional javascript code to render into html code \n// var h1 = document.createElement(\"h1\");\n// h1.innerHTML=\"hello world\";\n// document.getElementById(\"root\").appendChild(h1);\n//new series challenge\n// ReactDOM.render(\n//   [\n//   <h1>NetFlix</h1>,\n//   <p>List of best series</p>,\n//     <ol>\n//       <li>A</li>\n//       <li>B</li>\n//       <li>C</li>\n//       <li>D</li>\n//       <li>E</li>\n//     </ol>\n//   ],\n//    document.getElementById('root'));\n//use javscript element into html or jsx element using {} also use to write expression bt not statements(conditional,looping)\n// const fname=\"CM Punk\";\n// ReactDOM.render(\n//   <>\n//   <h1>My name is {fname}</h1>\n//   <p>Sum is : {3 + 4}</p>\n//   <p>Random no : {Math.random()}</p>\n//   </>\n//   ,document.getElementById('root'));\n//Template Literals\n// const fname=\"CM\";\n// const lname=\"Punk\";\n// ReactDOM.render(\n//   <h1>{`My name is ${fname} ${lname}`}</h1>,\n//   document.getElementById('root')\n// );\n//Challenge to show current date and time\n// const d = new Date;\n// ReactDOM.render(\n//   <>\n//   <h2>{`Current date ${d.toLocaleDateString()}`}</h2>\n//   <h3>{`Current Time ${d.toLocaleTimeString()}`}</h3>\n//   </>,\n//   document.getElementById('root')\n// );  \n//jsx attribute\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// const name=\"Abhi\";\n//inline css for jsx elements\n// const heading={\n//   color: 'maroon',\n//   textAlign: 'center',\n//   textTransform: 'capitalize',\n//   fontWeight: 'bold',\n//   textShadow: \"0px 2px 4px darkorange\",\n//   margin: \"50px 0px\",\n//   fontFamily: \"'Josefin Sans', sans-serif\",\n// };\n// ReactDOM.render(\n//   <>\n//     {/* <h1 className=\"heading\">My name is {name}</h1> */}\n//     <h1 style={heading}>My name is {name}</h1>\n//     <div className=\"img_div\">\n//       <img src=\"https://picsum.photos/200/300\" alt=\"img\"/>\n//       <img src=\"https://picsum.photos/250/300\" alt=\"img\"/>\n//       <img src=\"https://picsum.photos/300/300\" alt=\"img\"/>\n//     </div>\n//   </>,\n//   document.getElementById(\"root\")\n// );\n//challenge 3\n// let currDate = new Date();\n// let currHrs = currDate.getHours();\n// let greeting='';\n// let greetCss={  \n// };\n// let heading={\n//   color:'darksalmon'\n// };\n// if (currHrs>=1 && currHrs < 12)\n// {\n//   greeting='Good Morning';\n//    greetCss.color='green';\n//    greetCss.textShadow= '0px 2px 4px darkorange';\n// }\n// else if(currHrs>=12 && currHrs < 16)\n// {\n//   greeting='Good Afternoon';\n//    greetCss.color='red';\n//    greetCss.textShadow= '0px 2px 4px darkorange';\n// }\n// else if(currHrs>=16 && currHrs<19)\n// {\n//   greeting='Good Evening';\n//    greetCss.color='orangered';\n//    greetCss.textShadow= '0px 2px 4px palevioletred';\n// }\n// else{\n//   greeting='Good night';\n//    greetCss.color='Black';\n//    greetCss.textShadow= '0px 2px 4px darkturquoise';\n// }\n//  ReactDOM.render(\n//    <>\n//       <div>\n//         <h1 style={heading}>Hello Sir, <span style={\n//         greetCss}> {greeting}</span></h1>\n//       </div>\n//    </>,\n//    document.getElementById('root')\n//  );\n//Components  //challenge 3 rewrite using components\nimport React, { version } from 'react';\nimport ReactDOM from 'react-dom'; // import './index.css';\n// import App from './jsx/App';\n// ReactDOM.render(\n// <App></App>,\n// document.getElementById('root')\n// );\n//import & export of components\n//jo export hum default wala kr rhe hai uska naam hum kuch bhi de skte hai\n//bt otherthan default wahi naam dena padega jo humne export kiya tha curly braces me pass krke\n// import intro,{favprog,myName} from './jsx/App';\n//import all from app.jsx using * as <obj>\n// import * as abc from './jsx/App';\n\n/*ReactDOM.render(\n  <>\n    <ol>\n      { <li>{intro}</li>\n      <li>{favprog}</li>\n      <li>{myName()}</li>\n      }\n      <li>{abc.default}</li>\n      <li>{abc.favprog}</li>\n      <li>{abc.myName()}</li>\n    </ol>\n  </>,\n  document.getElementById('root')\n);*/\n//challenge 5 simple calculation\n\n/*import {add,sub,mul,div} from './jsx/Calc';\nReactDOM.render(\n  <>\n    <ul>\n      <li>Sum is : {add(30,2)}</li>\n      < li>Differnce is: {sub(30,15)}</li>\n      <li>Multiple is: {mul(30,2)}</li>\n      <li>Division is: {div(10,3)}</li>\n    </ul>\n  </>,\n  document.getElementById('root')\n)*/\n//Challenge netflix \n//props (custom attributes)\n// import './index.css';\n// import Card from './jsx/Card';\n// import Sdata from './jsx/Sdata';\n// import Netflix from './jsx/Netflix';\n\n/*function ncard(val)\n{\n  return (\n    <Card \n    img_src={val.img_src}\n    title={val.title}\n    sname={val.sname}\n    link={val.link}\n     />\n  );\n}*/\n// ReactDOM.render(\n//   <>\n//     <Netflix></Netflix>   \n//   </>,\n//   document.getElementById('root')\n// );\n\n/*The map() method creates a new array with the results of calling a function for every array element. The map() method calls the provided function once for each element in an array, in order. \nNote: map() does not execute the function for array elements without values.\nNote: this method does not change the original array.\nSyntax:\narray.,map(function(currentValue,index,arr),thisValue);\n*/\n// const oldarr = ['abc','def'];\n// const newarr = oldarr.map(function(cvalue,i){\n//     return i + \":\" + cvalue + \" \" + \"gfi\";\n// });\n// console.log(newarr);\n// const studdata= [\n// {\n//   id : 1, name : \"abc\"\n// },\n// {\n//   id : 2, name : \"def\"\n// }\n// ];\n// const newstud = studdata.map((cvalue) => {\n//   return `My name is ${cvalue.name}`;\n// });\n// console.log(newstud);\n//Challenge 6 slot game\n\n/*import Slot from './jsx/Slotgame';\nimport './index.css';\nReactDOM.render(\n  <Slot></Slot>,\n  document.getElementById('root')\n);*/\n//Array Destructuring(syntax is a javascript expression that makes it possible to unpack values from arrays, or properties from objects,into district variables)\n// const myfavprog=['js','c','c++','java','php'];\n// let [top1,,,,toplast]=myfavprog;\n// console.log(`my fav program is ${top1} and my least fav is ${toplast}`);\n//Hooks\n\n/*\n1.Hooks are the new feature introduced in the react 16.8 version.\n2.It allows you to use state and other React features without writing a class.\nHooks are functions that let you “hook into” React state and lifecycle features from function components.\n3.Hooks don’t work inside classes — they let you use React without classes. \n4.Hooks should always be used at the top level of the react functions.\n5.Node Version 6 or Above. NPM version 5.2 or above\n\nuseState is a hook(function) that allows you to have state variables in functional componenets.\nYou pass the intial state to this function,and it retrns a variable with the current state value.\n(not neccessary the intial state) and another function to update this value\n*/\n//Challenge hook on click get time and digital clock\n\n/* import Hooks from './jsx/Hooks';\nimport './index.css';\n\nReactDOM.render(\n  <Hooks></Hooks>,\n  document.getElementById('root')\n);*/\n//Event Handling\n\n/*import './index.css';\nimport Event from './jsx/Event';\n\nReactDOM.render(\n  <Event></Event>,\n  document.getElementById('root')\n  );\n*/\n//Forms\n// import Form from './jsx/Form';\n// import './index.css';\n// ReactDOM.render(\n//   <Form></Form>,\n//   document.getElementById('root')\n// );\n//Spread Operator\n\n/*the syntax is three dots (...) followed by array (or iterable) \nit expands the array into individual elements.\nso it can be useed to expand rhe array in a places where zero or more elements are expected*/\n// const fullname=['abc','def'];\n// const bio=[1,...fullname,26,'male'];\n// console.log(fullname);\n// console.log(bio);\n// const shootgames=['cod','far cry','resident evil'];\n// const[first,...remain]=shootgames;\n// console.log(first);\n// console.log(remain);\n//Challenge TodoList\n// import TodoList from './jsx/todolist/ToDoList';\n// import './index.css';\n// ReactDOM.render(\n//   <TodoList></TodoList>,\n//   document.getElementById('root')\n// );\n//Challenge Increment/Decrement by button\n// import IncDec from './jsx/IncDec';\n// import './index.css';\n// ReactDOM.render(\n//   <IncDec></IncDec>,\n//   document.getElementById('root')\n// );\n//Digital clock using npm\n// import ClockDemo from \"./jsx/ClockDemo\";\n// import './index.css';\n// ReactDOM.render(\n// <ClockDemo></ClockDemo>,\n// document.getElementById('root')\n// );\n//Todolist using material\n// import TodoListM from './jsx/todolist/TodoListM';\n// import './index.css';\n// ReactDOM.render(\n//   <TodoListM></TodoListM>,\n//   document.getElementById('root')\n// );\n//Bootstrap\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 403,\n    columnNumber: 5\n  }\n}, \"Welcome\"), /*#__PURE__*/React.createElement(\"button\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }\n}, \"Click Me \\uD83D\\uDC4D\")), document.getElementById('root'));","map":{"version":3,"sources":["F:/demo/src/index.js"],"names":["React","version","ReactDOM","render","document","getElementById"],"mappingsgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;;;;;;;;;;;;;;AAeA;;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;AAEA;;;;;;AAOA;AACA;AAEA;AACA;AAEA;;AACA;;;;;;;;;;;;AAaA;;AACA;;;;;;;AAQA;;AACA;;;;;;;;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;;;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACAA,QAAQ,CAACC,MAAT,eACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,CADF,EAKEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CALF","sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     {/* <App /> */}\n//     <h1>Hello World</h1>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n// var React = require('react');\n// import React from 'react';\n// var ReactDOM = require('react-dom');\n// import ReactDOM from 'react-dom;\n// ReactDOM.render('kya dikhana hai what to show','kha dikhana hai where to show','callback func');\n\n// ReactDOM.render(\n//   <h1>Hello World!!</h1>\n//   ,document.getElementById('root'));\n\n//render multiple elements inside ReactDOM.render() \n// place html (or can say jsx elemnts) put it in div tag\n\n// ReactDOM.render(\n//   <div>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </div>\n//   ,document.getElementById('root'));\n\n//To avoid unneccesary tag place on html code while including multiple elements inside ReactDom.render()\n//we use React.fragment\n\n// ReactDOM.render(\n//   <React.Fragment> also u can avoid to write fragment like <>elements</>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </React.Fragment>\n//   ,document.getElementById('root'));\n\n// const arr=['abc','def','efg'];\n// In react v16 it's possible for render()\n// to  return an array of elements \n\n// ReactDOM.render(\n//   [\n//   <h1>Hello World!!</h1>,\n//   <p>Welcome enjoy</p>\n//   ],\n//    document.getElementById('root'));\n\n// after converted by babel(Javascript Compiler) \n// ReactDOM.render(React.createElement(\"h1\",null,\"Hello world\"),document.getElementById(\"root\"));\n\n//traditional javascript code to render into html code \n// var h1 = document.createElement(\"h1\");\n// h1.innerHTML=\"hello world\";\n// document.getElementById(\"root\").appendChild(h1);\n\n//new series challenge\n\n// ReactDOM.render(\n//   [\n//   <h1>NetFlix</h1>,\n//   <p>List of best series</p>,\n//     <ol>\n//       <li>A</li>\n//       <li>B</li>\n//       <li>C</li>\n//       <li>D</li>\n//       <li>E</li>\n//     </ol>\n//   ],\n//    document.getElementById('root'));\n\n//use javscript element into html or jsx element using {} also use to write expression bt not statements(conditional,looping)\n\n// const fname=\"CM Punk\";\n// ReactDOM.render(\n//   <>\n//   <h1>My name is {fname}</h1>\n//   <p>Sum is : {3 + 4}</p>\n//   <p>Random no : {Math.random()}</p>\n//   </>\n//   ,document.getElementById('root'));\n\n  //Template Literals\n  // const fname=\"CM\";\n  // const lname=\"Punk\";\n  // ReactDOM.render(\n  //   <h1>{`My name is ${fname} ${lname}`}</h1>,\n  //   document.getElementById('root')\n  // );\n\n  //Challenge to show current date and time\n\n  // const d = new Date;\n  // ReactDOM.render(\n  //   <>\n  //   <h2>{`Current date ${d.toLocaleDateString()}`}</h2>\n  //   <h3>{`Current Time ${d.toLocaleTimeString()}`}</h3>\n  //   </>,\n  //   document.getElementById('root')\n  // );  \n\n//jsx attribute\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// const name=\"Abhi\";\n//inline css for jsx elements\n// const heading={\n//   color: 'maroon',\n//   textAlign: 'center',\n//   textTransform: 'capitalize',\n//   fontWeight: 'bold',\n//   textShadow: \"0px 2px 4px darkorange\",\n//   margin: \"50px 0px\",\n//   fontFamily: \"'Josefin Sans', sans-serif\",\n// };\n// ReactDOM.render(\n//   <>\n//     {/* <h1 className=\"heading\">My name is {name}</h1> */}\n//     <h1 style={heading}>My name is {name}</h1>\n//     <div className=\"img_div\">\n//       <img src=\"https://picsum.photos/200/300\" alt=\"img\"/>\n//       <img src=\"https://picsum.photos/250/300\" alt=\"img\"/>\n//       <img src=\"https://picsum.photos/300/300\" alt=\"img\"/>\n//     </div>\n//   </>,\n//   document.getElementById(\"root\")\n// );\n\n//challenge 3\n// let currDate = new Date();\n// let currHrs = currDate.getHours();\n\n// let greeting='';\n// let greetCss={  \n// };\n// let heading={\n//   color:'darksalmon'\n// };\n// if (currHrs>=1 && currHrs < 12)\n// {\n//   greeting='Good Morning';\n  \n//    greetCss.color='green';\n  \n//    greetCss.textShadow= '0px 2px 4px darkorange';\n// }\n// else if(currHrs>=12 && currHrs < 16)\n// {\n//   greeting='Good Afternoon';\n  \n//    greetCss.color='red';\n\n//    greetCss.textShadow= '0px 2px 4px darkorange';\n// }\n// else if(currHrs>=16 && currHrs<19)\n// {\n//   greeting='Good Evening';\n  \n//    greetCss.color='orangered';\n//    greetCss.textShadow= '0px 2px 4px palevioletred';\n// }\n// else{\n//   greeting='Good night';\n  \n//    greetCss.color='Black';\n//    greetCss.textShadow= '0px 2px 4px darkturquoise';\n// }\n//  ReactDOM.render(\n//    <>\n//       <div>\n//         <h1 style={heading}>Hello Sir, <span style={\n//         greetCss}> {greeting}</span></h1>\n//       </div>\n//    </>,\n//    document.getElementById('root')\n//  );\n\n//Components  //challenge 3 rewrite using components\nimport React, { version } from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './jsx/App';\n// ReactDOM.render(\n// <App></App>,\n// document.getElementById('root')\n// );\n\n//import & export of components\n\n//jo export hum default wala kr rhe hai uska naam hum kuch bhi de skte hai\n//bt otherthan default wahi naam dena padega jo humne export kiya tha curly braces me pass krke\n// import intro,{favprog,myName} from './jsx/App';\n\n//import all from app.jsx using * as <obj>\n// import * as abc from './jsx/App';\n\n/*ReactDOM.render(\n  <>\n    <ol>\n      { <li>{intro}</li>\n      <li>{favprog}</li>\n      <li>{myName()}</li>\n      }\n      <li>{abc.default}</li>\n      <li>{abc.favprog}</li>\n      <li>{abc.myName()}</li>\n    </ol>\n  </>,\n  document.getElementById('root')\n);*/\n\n//challenge 5 simple calculation\n/*import {add,sub,mul,div} from './jsx/Calc';\nReactDOM.render(\n  <>\n    <ul>\n      <li>Sum is : {add(30,2)}</li>\n      < li>Differnce is: {sub(30,15)}</li>\n      <li>Multiple is: {mul(30,2)}</li>\n      <li>Division is: {div(10,3)}</li>\n    </ul>\n  </>,\n  document.getElementById('root')\n)*/\n//Challenge netflix \n//props (custom attributes)\n// import './index.css';\n// import Card from './jsx/Card';\n// import Sdata from './jsx/Sdata';\n// import Netflix from './jsx/Netflix';\n\n/*function ncard(val)\n{\n  return (\n    <Card \n    img_src={val.img_src}\n    title={val.title}\n    sname={val.sname}\n    link={val.link}\n     />\n  );\n}*/\n// ReactDOM.render(\n//   <>\n//     <Netflix></Netflix>   \n//   </>,\n//   document.getElementById('root')\n// );\n/*The map() method creates a new array with the results of calling a function for every array element. The map() method calls the provided function once for each element in an array, in order. \nNote: map() does not execute the function for array elements without values.\nNote: this method does not change the original array.\nSyntax:\narray.,map(function(currentValue,index,arr),thisValue);\n*/\n// const oldarr = ['abc','def'];\n// const newarr = oldarr.map(function(cvalue,i){\n//     return i + \":\" + cvalue + \" \" + \"gfi\";\n// });\n// console.log(newarr);\n\n// const studdata= [\n// {\n//   id : 1, name : \"abc\"\n// },\n// {\n//   id : 2, name : \"def\"\n// }\n// ];\n\n// const newstud = studdata.map((cvalue) => {\n//   return `My name is ${cvalue.name}`;\n// });\n// console.log(newstud);\n\n\n//Challenge 6 slot game\n\n/*import Slot from './jsx/Slotgame';\nimport './index.css';\nReactDOM.render(\n  <Slot></Slot>,\n  document.getElementById('root')\n);*/\n\n//Array Destructuring(syntax is a javascript expression that makes it possible to unpack values from arrays, or properties from objects,into district variables)\n// const myfavprog=['js','c','c++','java','php'];\n\n// let [top1,,,,toplast]=myfavprog;\n// console.log(`my fav program is ${top1} and my least fav is ${toplast}`);\n\n//Hooks\n/*\n1.Hooks are the new feature introduced in the react 16.8 version.\n2.It allows you to use state and other React features without writing a class.\nHooks are functions that let you “hook into” React state and lifecycle features from function components.\n3.Hooks don’t work inside classes — they let you use React without classes. \n4.Hooks should always be used at the top level of the react functions.\n5.Node Version 6 or Above. NPM version 5.2 or above\n\nuseState is a hook(function) that allows you to have state variables in functional componenets.\nYou pass the intial state to this function,and it retrns a variable with the current state value.\n(not neccessary the intial state) and another function to update this value\n*/\n\n//Challenge hook on click get time and digital clock\n/* import Hooks from './jsx/Hooks';\nimport './index.css';\n\nReactDOM.render(\n  <Hooks></Hooks>,\n  document.getElementById('root')\n);*/\n\n//Event Handling\n/*import './index.css';\nimport Event from './jsx/Event';\n\nReactDOM.render(\n  <Event></Event>,\n  document.getElementById('root')\n  );\n*/\n\n//Forms\n// import Form from './jsx/Form';\n// import './index.css';\n\n// ReactDOM.render(\n//   <Form></Form>,\n//   document.getElementById('root')\n// );\n\n//Spread Operator\n/*the syntax is three dots (...) followed by array (or iterable) \nit expands the array into individual elements.\nso it can be useed to expand rhe array in a places where zero or more elements are expected*/\n\n// const fullname=['abc','def'];\n// const bio=[1,...fullname,26,'male'];\n\n// console.log(fullname);\n// console.log(bio);\n\n// const shootgames=['cod','far cry','resident evil'];\n// const[first,...remain]=shootgames;\n\n// console.log(first);\n// console.log(remain);\n\n//Challenge TodoList\n// import TodoList from './jsx/todolist/ToDoList';\n// import './index.css';\n\n// ReactDOM.render(\n//   <TodoList></TodoList>,\n//   document.getElementById('root')\n// );\n\n//Challenge Increment/Decrement by button\n// import IncDec from './jsx/IncDec';\n// import './index.css';\n\n// ReactDOM.render(\n//   <IncDec></IncDec>,\n//   document.getElementById('root')\n// );\n\n//Digital clock using npm\n// import ClockDemo from \"./jsx/ClockDemo\";\n// import './index.css';\n// ReactDOM.render(\n// <ClockDemo></ClockDemo>,\n// document.getElementById('root')\n// );\n\n//Todolist using material\n\n// import TodoListM from './jsx/todolist/TodoListM';\n// import './index.css';\n\n// ReactDOM.render(\n//   <TodoListM></TodoListM>,\n//   document.getElementById('root')\n// );\n\n//Bootstrap\nReactDOM.render(\n  <>\n    <h1>Welcome</h1>\n    <button>Click Me 👍</button>\n  </>,\n  document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}