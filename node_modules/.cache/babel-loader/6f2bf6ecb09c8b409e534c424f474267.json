{"ast":null,"code":"var _jsxFileName = \"F:\\\\demo\\\\src\\\\index.js\";\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     {/* <App /> */}\n//     <h1>Hello World</h1>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n// var React = require('react');\nimport React from 'react'; // var ReactDOM = require('react-dom');\n\nimport ReactDOM from 'react-dom'; // ReactDOM.render('kya dikhana hai what to show','kha dikhana hai where to show','callback func');\n// ReactDOM.render(\n//   <h1>Hello World!!</h1>\n//   ,document.getElementById('root'));\n//render multiple elements inside ReactDOM.render() \n// place html (or can say jsx elemnts) put it in div tag\n// ReactDOM.render(\n//   <div>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </div>\n//   ,document.getElementById('root'));\n//To avoid unneccesary tag place on html code while including multiple elements inside ReactDom.render()\n//we use React.fragment\n// ReactDOM.render(\n//   <React.Fragment> also u can avoid to write fragment like <>elements</>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </React.Fragment>\n//   ,document.getElementById('root'));\n// const arr=['abc','def','efg'];\n// In react v16 it's possible for render()\n// to  return an array of elements \n// ReactDOM.render(\n//   [\n//   <h1>Hello World!!</h1>,\n//   <p>Welcome enjoy</p>\n//   ],\n//    document.getElementById('root'));\n// after converted by babel(Javascript Compiler) \n// ReactDOM.render(React.createElement(\"h1\",null,\"Hello world\"),document.getElementById(\"root\"));\n//traditional javascript code to render into html code \n// var h1 = document.createElement(\"h1\");\n// h1.innerHTML=\"hello world\";\n// document.getElementById(\"root\").appendChild(h1);\n//new series challenge\n// ReactDOM.render(\n//   [\n//   <h1>NetFlix</h1>,\n//   <p>List of best series</p>,\n//     <ol>\n//       <li>A</li>\n//       <li>B</li>\n//       <li>C</li>\n//       <li>D</li>\n//       <li>E</li>\n//     </ol>\n//   ],\n//    document.getElementById('root'));\n//use javscript element into html or jsx element using {} also use to write expression\n\nconst fname = \"CM Punk\";\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 3\n  }\n}, \"My name is \", fname), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 3\n  }\n}, \"Sum is : \", 3 + 4), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }\n}, \"Random no : \", Math.random())), document.getElementById('root'));","map":{"version":3,"sources":["F:/demo/src/index.js"],"names":["React","ReactDOM","fname","render","Math","random","document","getElementById"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,KAAK,GAAC,SAAZ;AACAD,QAAQ,CAACE,MAAT,eACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgBD,KAAhB,CADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAa,IAAI,CAAjB,CAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAgBE,IAAI,CAACC,MAAL,EAAhB,CAHA,CADF,EAMGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANH","sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     {/* <App /> */}\n//     <h1>Hello World</h1>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n// var React = require('react');\nimport React from 'react';\n// var ReactDOM = require('react-dom');\nimport ReactDOM from 'react-dom';\n// ReactDOM.render('kya dikhana hai what to show','kha dikhana hai where to show','callback func');\n\n// ReactDOM.render(\n//   <h1>Hello World!!</h1>\n//   ,document.getElementById('root'));\n\n//render multiple elements inside ReactDOM.render() \n// place html (or can say jsx elemnts) put it in div tag\n\n// ReactDOM.render(\n//   <div>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </div>\n//   ,document.getElementById('root'));\n\n//To avoid unneccesary tag place on html code while including multiple elements inside ReactDom.render()\n//we use React.fragment\n\n// ReactDOM.render(\n//   <React.Fragment> also u can avoid to write fragment like <>elements</>\n//   <h1>Hello World!!</h1>\n//   <p>Welcome</p>\n//   </React.Fragment>\n//   ,document.getElementById('root'));\n\n// const arr=['abc','def','efg'];\n// In react v16 it's possible for render()\n// to  return an array of elements \n\n// ReactDOM.render(\n//   [\n//   <h1>Hello World!!</h1>,\n//   <p>Welcome enjoy</p>\n//   ],\n//    document.getElementById('root'));\n\n// after converted by babel(Javascript Compiler) \n// ReactDOM.render(React.createElement(\"h1\",null,\"Hello world\"),document.getElementById(\"root\"));\n\n//traditional javascript code to render into html code \n// var h1 = document.createElement(\"h1\");\n// h1.innerHTML=\"hello world\";\n// document.getElementById(\"root\").appendChild(h1);\n\n//new series challenge\n\n// ReactDOM.render(\n//   [\n//   <h1>NetFlix</h1>,\n//   <p>List of best series</p>,\n//     <ol>\n//       <li>A</li>\n//       <li>B</li>\n//       <li>C</li>\n//       <li>D</li>\n//       <li>E</li>\n//     </ol>\n//   ],\n//    document.getElementById('root'));\n\n//use javscript element into html or jsx element using {} also use to write expression\nconst fname=\"CM Punk\";\nReactDOM.render(\n  <>\n  <h1>My name is {fname}</h1>\n  <p>Sum is : {3 + 4}</p>\n  <p>Random no : {Math.random()}</p>\n  </>\n  ,document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}